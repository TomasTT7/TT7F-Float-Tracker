/*
GPSerror NMEA
Bit 7 0b10100000 not used - DL-FLDIGI doesn't show ASCII-8 characters																			
Bit 6 0b01100000 NAVmode error (!6)																												'`'
Bit 5 0b00100000 default message - NO ERROR (for all ERRORS Bit 5 changes to 0 (0b01011111) - for the character to be shown in DL-FLDIGI)		' '
Bit 4 0b00110000 no FIX																															'0'
Bit 3 0b00101000 UBX response timeout																											'('
Bit 2 0b00100100 GGA checksum error																												'$'
Bit 1 0b00100010 GGA buffer error																												'"'
Bit 0 0b00100001 UBLOX response timeout																											'!'

GPSerror UBX
Bit 7 0b10100000 not used - DL-FLDIGI doesn't show ASCII-8 characters																			
Bit 6 0b01100000 NAVmode error (!6)																												'`'
Bit 5 0b00100000 default message - NO ERROR (for all ERRORS Bit 5 changes to 0 (0b01011111) - for the character to be shown in DL-FLDIGI)		' '
Bit 4 0b00110000 0611 error POWER MODE																											'0'
Bit 3 0b00101000 0121 error TIME																												'('
Bit 2 0b00100100 0102 error POSITION DATA / 0107 error POSITION DATA																			'$'
Bit 1 0b00100010 0106 error FIX, SATS																											'"'
Bit 0 0b00100001 0624 error NAVIGATION ENGINE																									'!'

character 'DEL' doesn't show in DL-FLDIGI, needs to be changed ->																				'_'
character corresponds to ',' which is used in the parser ->																						'L'
character corresponds to '*' which is used in the parser ->																						'J'
character corresponds to '$' which is used in the parser ->																						'D'
*/

#ifndef ARM_UBLOX_H
#define ARM_UBLOX_H

#include "stdint.h"

#define UBX
#define NMEA

#define GPSBUFFER_SIZE 125 // 60 - UBX, 125 - NMEA (PUBX00)

static uint8_t enableGPSonly[28]		= {0xB5, 0x62, 0x6, 0x3E, 0x14, 0x0, 0x0, 0x0, 0xFF, 0x2, 0x0, 0x8, 0xFF, 0x0, 0x1, 0x0, 0x1, 0x0, 0x6, 0x8, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6F, 0xCC}; // response ACK 10 bytes (disable GLONASS)
static uint8_t setNMEAoff[28]	   		= {0xB5, 0x62, 0x06, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD0, 0x08, 0x00, 0x00, 0x80, 0x25, 0x00, 0x00, 0x07, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xA9};
static uint8_t setNAVmode[44]			= {0xB5, 0x62, 0x06, 0x24, 0x24, 0x00, 0xFF, 0xFF, 0x06, 0x03, 0x00, 0x00, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x05, 0x00, 0xFA, 0x00, 0xFA, 0x00, 0x64, 0x00, 0x2C, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0xE8};
static uint8_t setRMCrate0[16]			= {0xB5, 0x62, 0x6, 0x1, 0x8, 0x0, 0xF0, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x03, 0x3F}; // response ACK 10 bytes
static uint8_t setVTGrate0[16]			= {0xB5, 0x62, 0x6, 0x1, 0x8, 0x0, 0xF0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x04, 0x46}; // response ACK 10 bytes
static uint8_t setGSArate0[16]			= {0xB5, 0x62, 0x6, 0x1, 0x8, 0x0, 0xF0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x01, 0x31}; // response ACK 10 bytes
static uint8_t setGSVrate0[16]			= {0xB5, 0x62, 0x6, 0x1, 0x8, 0x0, 0xF0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x02, 0x38}; // response ACK 10 bytes
static uint8_t setGLLrate0[16]			= {0xB5, 0x62, 0x6, 0x1, 0x8, 0x0, 0xF0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x00, 0x2A}; // response ACK 10 bytes
static uint8_t setGGArate0[16]			= {0xB5, 0x62, 0x6, 0x1, 0x8, 0x0, 0xF0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xFF, 0x23}; // response ACK 10 bytes
static uint8_t setGGArate1[16]			= {0xB5, 0x62, 0x6, 0x1, 0x8, 0x0, 0xF0, 0x0, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x05, 0x38}; // response ACK 10 bytes
static uint8_t request0624[8]			= {0xB5, 0x62, 0x06, 0x24, 0x00, 0x00, 0x2A, 0x84}; // NAVIGATION ENGINE (dynModel, fix) - response 44 bytes
static uint8_t request0611[8]			= {0xB5, 0x62, 0x06, 0x11, 0x00, 0x00, 0x17, 0x4B}; // POWER MODE settings - response 10 bytes
static uint8_t request063B[8]			= {0xB5, 0x62, 0x06, 0x3B, 0x00, 0x00, 0x41, 0xC9}; // POWER MMANAGEMENT configuration - response 56 bytes
static uint8_t request063E[8]			= {0xB5, 0x62, 0x06, 0x3E, 0x00, 0x00, 0x44, 0xD2}; // GNSS configuration - response 52 bytes	
static uint8_t request0102[8]			= {0xB5, 0x62, 0x01, 0x02, 0x00, 0x00, 0x03, 0x0A}; // POSITION DATA (ms, long, lat, alt) - response 36 bytes
static uint8_t request0106[8]			= {0xB5, 0x62, 0x01, 0x06, 0x00, 0x00, 0x07, 0x16}; // GPSfix, SATS - response 60 bytes
static uint8_t request0121[8]			= {0xB5, 0x62, 0x01, 0x21, 0x00, 0x00, 0x22, 0x67}; // TIME, DATE (year, month, day, hour, minute, second) - response 28 bytes
static uint8_t request0107[8]			= {0xB5, 0x62, 0x01, 0x07, 0x00, 0x00, 0x08, 0x19}; // DATE, TIME, FIX, SATS, POSITION, SPEED, HEADING - response 100 bytes (UBLOX 8), 92 bytes (UBLOX 7)
static uint8_t requestGPGGA[]			= "$EIGPQ,GGA*27\r\n"; // UBLOX MAX-7C (default) - time, lat, long, satellites, alt - size [15] response [~75]
static uint8_t requestGPZDA[]			= "$EIGPQ,ZDA*39\r\n"; // UBLOX MAX-7C (default) - time, day, month, year - size [15] response [~36]
static uint8_t requestGNGGA[]			= "$EIGNQ,GGA*39\r\n"; // UBLOX MAX-M8Q (default) - size [15] response [~75]
static uint8_t requestGNZDA[]			= "$EIGNQ,ZDA*27\r\n"; // UBLOX MAX-M8Q (default) - size [15] response [~36]
static uint8_t setContinuousMode[10]	= {0xB5, 0x62, 0x06, 0x11, 0x02, 0x00, 0x00, 0x00, 0x19, 0x81}; // response ACK 10 bytes
static uint8_t setPowerSaveMode[10]		= {0xB5, 0x62, 0x06, 0x11, 0x02, 0x00, 0x00, 0x01, 0x1A, 0x82}; // response ACK 10 bytes
static uint8_t setCyclicOperation1[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x00, 0x2D, 0x00, 0x00, 0x10, 0x3, 0x0, 0xBB, 0x8, 0x0, 0x0, 0xBB, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x34, 0x09};		// response ACK 10 bytes - CYCLIC 3s, doNotEnterOff, update EPH
static uint8_t setCyclicOperation2[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x3, 0x0, 0xBB, 0x8, 0x0, 0x0, 0xBB, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x24, 0x99};		// response ACK 10 bytes - CYCLIC 3s, doNotEnterOff
static uint8_t setCyclicOperation3[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x00, 0x2D, 0x00, 0x00, 0x10, 0x2, 0x0, 0xBB, 0x8, 0x0, 0x0, 0xBB, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x33, 0xE3};		// response ACK 10 bytes - CYCLIC 3s, update EPH
static uint8_t setCyclicOperation4[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x10, 0x3, 0x0, 0x88, 0x13, 0x0, 0x0, 0x88, 0x13, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xF3, 0xC9};	// response ACK 10 bytes - CYCLIC 5s, doNotEnterOff, update EPH
static uint8_t setCyclicOperation5[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x10, 0x3, 0x0, 0xD0, 0x7, 0x0, 0x0, 0xD0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6B, 0xD1};		// response ACK 10 bytes - CYCLIC 2s, doNotEnterOff, update EPH
static uint8_t setCyclicOperation6[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x06, 0x3C, 0x00, 0x00, 0x90, 0x03, 0x01, 0x10, 0x27, 0x00, 0x00, 0x10, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x4F, 0xC1, 0x03, 0x00, 0x87, 0x02, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x64, 0x40, 0x01, 0x00, 0x1F, 0x58}; // response ACK 10 bytes - CYCLIC 10s, doNotEnterOff, update EPH
static uint8_t setONOFFoperation1[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x00, 0x3C, 0x00, 0x00, 0x10, 0x1, 0x0, 0x60, 0xEA, 0x0, 0x0, 0x60, 0xEA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4F, 0x4B};	// response ACK 10 bytes - ONOFF 60s, doNotEnterOff, update EPH
static uint8_t setONOFFoperation2[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6F, 0x33};		// response ACK 10 bytes - ONOFF permanently
static uint8_t setONOFFoperation3[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x4F, 0xC1, 0x03, 0x00, 0x87, 0x02, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x64, 0x40, 0x01, 0x00, 0x62, 0x50}; // response ACK 10 bytes - ONOFF permanently
static uint8_t setONOFFoperation4[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x06, 0x05, 0x00, 0x00, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x4F, 0xC1, 0x03, 0x00, 0x87, 0x02, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x64, 0x40, 0x01, 0x00, 0x68, 0x48}; // response ACK 10 bytes - ONOFF permanently, doNotEnterOff, maxStartup 5
static uint8_t setONOFFoperation5[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x06, 0x01, 0x00, 0x00, 0x90, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x4F, 0xC1, 0x03, 0x00, 0x87, 0x02, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x64, 0x40, 0x01, 0x00, 0x74, 0x10}; // response ACK 10 bytes - ONOFF permanently, doNotEnterOff, update EPH, maxStartup 1
static uint8_t setONOFFoperation6[52]	= {0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x00, 0x01, 0x06, 0x01, 0x00, 0x00, 0x80, 0x00, 0x01, 0x60, 0xEA, 0x00, 0x00, 0x60, 0xEA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x01, 0x00, 0x00, 0x4F, 0xC1, 0x03, 0x00, 0x87, 0x02, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x64, 0x40, 0x01, 0x00, 0xF7, 0x4E}; // response ACK 10 bytes - ONOFF 60s, maxStartup 1
static uint8_t setONOFFoperation7[52]	= {0xB5, 0x62, 0x6, 0x3B, 0x2C, 0x0, 0x1, 0x6, 0x1, 0x0, 0x0, 0x80, 0x0, 0x1, 0x60, 0xEA, 0x0, 0x0, 0x60, 0xEA, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x27, 0x0, 0x0, 0x2C, 0x1, 0x0, 0x0, 0x4F, 0xC1, 0x3, 0x0, 0x87, 0x2, 0x0, 0x0, 0xFF, 0x0, 0x0, 0x0, 0x64, 0x40, 0x1, 0x0, 0x2E, 0x4F}; // response ACK 10 bytes - ONOFF 60s, maxStartup 10
static uint8_t setBackupMode[16]		= {0xB5, 0x62, 0x02, 0x41, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x4D, 0x3B}; // go to backup mode for infinite duration (duration selectable)
static uint8_t setSwBackupMode[16]		= {0xB5, 0x62, 0x06, 0x57, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x4B, 0x43, 0x42, 0x86, 0x46}; // go to software backup mode
static uint8_t setGNSSrunning[16]		= {0xB5, 0x62, 0x06, 0x57, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x4E, 0x55, 0x52, 0x7B, 0xC3}; // GNSS running
static uint8_t setGNSSstopped[16]		= {0xB5, 0x62, 0x06, 0x57, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x4F, 0x54, 0x53, 0xAC, 0x85}; // GNSS stopped
static uint8_t dummyByte[1]				= {0xFF}; // to wake up the module in case it is inactive, wait 1.5s and send the configuration message

static uint8_t GPSbuffer[GPSBUFFER_SIZE];
static uint16_t GPSchecksum;
extern uint8_t GPShour;
extern uint8_t GPSminute;
extern uint8_t GPSsecond;
extern uint8_t GPSday;
extern uint8_t GPSmonth;
extern uint16_t GPSyear;
extern uint8_t GPSsats;
extern uint8_t GPSfix;
extern int16_t GPSlat_int;
extern int16_t GPSlon_int;
extern int16_t GPSlat_int_L;
extern int16_t GPSlon_int_L;
extern int32_t GPSlat_dec;
extern int32_t GPSlon_dec;
extern int32_t GPSlat_dec_L;
extern int32_t GPSlon_dec_L;
extern int32_t GPSalt;
extern int32_t GPSalt_L;
extern int32_t GPSlat;
extern int32_t GPSlon;
extern int32_t GPSlat_L;
extern int32_t GPSlon_L;
extern uint8_t GPSnavigation;
extern uint8_t GPSpowermode;
extern uint8_t GPSpowersavemodestate;
extern int32_t GPSgroundspeed; // mm/s
extern int32_t GPSheading; // degrees (1e-5)
extern uint8_t GPSerror; // default no ERRORs 0b00100000
extern uint32_t telemCount;
extern uint16_t AD3data;
extern uint16_t AD9data;
extern uint16_t AD15data;
extern uint32_t telemetry_len;
extern float APRSLatitude; // required for Coords_DEGtoDEC()
extern float APRSLongitude; // required for Coords_DEGtoDEC()

#ifdef UBX
	static uint8_t GPScommunError = 0;
	static uint8_t GPSackError = 0;
	static uint8_t GPSchecksError = 0;
	static uint8_t GPSbufferError = 0;
#endif // UBX

#ifdef NMEA
	extern uint8_t GPSlatNS;
	extern uint8_t GPSlonEW;
	static uint8_t GPSlatNS_L = 1;
	static uint8_t GPSlonEW_L = 1;
	static uint8_t GPSaltNeg;
	static uint8_t GPSaltNeg_L;	
	static uint8_t GPSchecksum_verify;
#endif // NMEA


// Functions
uint16_t crc_xmodem_update(uint16_t crc, uint8_t data);
uint16_t CRC16_checksum(uint8_t *string, uint32_t len, uint32_t start);
uint32_t ASCII_8bit_transmit(uint8_t number, uint8_t *buffer, uint32_t sequence);
uint32_t ASCII_8bit_2DEC_transmit(uint8_t number, uint8_t *buffer, uint32_t sequence);
uint32_t ASCII_16bit_transmit(uint16_t number, uint8_t *buffer, uint32_t sequence);
uint32_t ASCII_16bit_HEX_transmit(uint16_t number, uint8_t *buffer, uint32_t sequence);
uint32_t ASCII_32bit_transmit(uint32_t number, uint8_t *buffer, uint32_t sequence);
uint32_t ASCII_32bit_LATLON_transmit(uint32_t number, uint8_t *buffer, uint32_t sequence);
void Coords_DEGtoDEC(uint32_t lat_INT, uint32_t lat_DEC, uint32_t lon_INT, uint32_t lon_DEC, uint8_t latNS, uint8_t lonEW, float lat, float lon); // input (4928 08702 1)
void UBLOX_powersave_mode_init(uint8_t * mode);


#ifdef UBX
	void UBLOX_fill_buffer_UBX(uint8_t *buffer, uint8_t len);
	uint8_t UBLOX_verify_checksum(volatile uint8_t *buffer, uint8_t len);
	void UBLOX_parse_0102(volatile uint8_t *buffer); // UBX 01 02 - HEX - POSITION
	void UBLOX_parse_0121(volatile uint8_t *buffer); // UBX 01 21 - HEX - TIME
	void UBLOX_parse_0106(volatile uint8_t *buffer); // UBX 01 06 - HEX - SATS & FIX
	void UBLOX_parse_0624(volatile uint8_t *buffer); // UBX 06 24 - HEX - NAVIGATION MODE
	void UBLOX_parse_0611(volatile uint8_t *buffer); // UBX 06 11 - HEX - POWER SAVE MODE
	void UBLOX_parse_0107(volatile uint8_t *buffer); // UBX 01 07 - HEX - EVERYTHING
	void UBLOX_parse_ACK(volatile uint8_t *buffer);
	void UBLOX_parse_empty();
	void UBLOX_request_UBX(uint8_t *request, uint8_t len, uint8_t expectlen, void (*parse)(volatile uint8_t*)); // request with a dynamic delay
	uint32_t TX_BUFFER_fill_UBX(uint8_t *buffer, uint32_t sequence);
#endif // UBX


#ifdef NMEA
	void UBLOX_fill_buffer_NMEA(uint8_t *buffer);
	void UBLOX_send_message(uint8_t *message, uint8_t len);
	void UBLOX_process_GGA(uint8_t *buffer);
	void UBLOX_process_ZDA(uint8_t *buffer);
	uint32_t TX_BUFFER_fill_NMEA(uint8_t *buffer, uint32_t sequence);
#endif // NMEA

#endif // ARM_UBLOX_H_


/*
// UBX TEST DATA
uint8_t test0102_1[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0x10, 0x9C, 0xD1, 0x0A, 0xF3, 0x54, 0x7C, 0x1D, 0x0, 0x0, 0x0, 0x0, 0x44, 0x18, 0x6, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0xB7, 0x7A};
uint8_t test0102_2[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0xF0, 0x63, 0x2E, 0xF5, 0xF3, 0x54, 0x7C, 0x1D, 0x0, 0x0, 0x0, 0x0, 0xBC, 0xE7, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0xDF, 0x9A};
uint8_t test0102_3[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0xF0, 0x63, 0x2E, 0xF5, 0x0D, 0xAB, 0x83, 0xE2, 0x0, 0x0, 0x0, 0x0, 0xBC, 0xE7, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0x1C, 0xAA};
uint8_t test0102_4[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0x10, 0x9C, 0xD1, 0x0A, 0x0D, 0xAB, 0x83, 0xE2, 0x0, 0x0, 0x0, 0x0, 0x44, 0x72, 0x68, 0x2, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0xB2, 0x4E};
uint8_t test0102_5[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0xFC, 0xFF, 0xFF, 0xFF, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x10, 0x9E, 0x67, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0x0, 0x10};
uint8_t test0102_6[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0x3, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x69, 0xB0, 0x76, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0x84, 0x82};
uint8_t test0102_7[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0x3, 0x0, 0x0, 0x0, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x62, 0x8E, 0x7D, 0x1, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0x58, 0x3C};
uint8_t test0102_8[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0xFC, 0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xFF, 0xFF, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5A, 0x62, 0x2, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0x9E, 0x79};
uint8_t test0102_9[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0xF7, 0xD1, 0x49, 0x6B, 0xFB, 0xE8, 0xA4, 0x35, 0x0, 0x0, 0x0, 0x0, 0xCE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0xF1, 0x44};
uint8_t test0102_10[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0x9, 0x2E, 0xB6, 0x94, 0xFB, 0xE8, 0xA4, 0x35, 0x0, 0x0, 0x0, 0x0, 0x32, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0x5D, 0xD8};
uint8_t test0102_11[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0x9, 0x2E, 0xB6, 0x94, 0x5, 0x17, 0x5B, 0xCA, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0x14, 0x38};
uint8_t test0102_12[36] = {0xB5, 0x62, 0x1, 0x2, 0x1C, 0x0, 0xC8, 0x18, 0x16, 0x4, 0xF7, 0xD1, 0x49, 0x6B, 0x5, 0x17, 0x5B, 0xCA, 0x0, 0x0, 0x0, 0x0, 0x9C, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x76, 0x84, 0xDF, 0x44, 0xF4};

// NMEA TEST DATA
char testPUBX00_1[] = "$PUBX,00,081350.00,4717.113210,N,00833.915187,E,546.589,G3,2.1,2.0,0.007,77.52,0.007,,0.92,1.19,0.77,9,0,0*5F";
char testPUBX00_2[] = "$PUBX,00,081355.00,5149.308812,N,00000.760811,W,22074.589,G3,2.1,2.0,0.007,77.52,0.007,,0.92,1.19,0.77,12,0,0*78";
char testPUBX00_3[] = "$PUBX,00,081401.00,0102.908114,S,10000.000101,W,44021.589,G3,2.1,2.0,0.007,77.52,0.007,,0.92,1.19,0.77,12,0,0*64";
char testPUBX00_4[] = "$PUBX,00,081407.00,7042.000115,S,02210.900015,E,21.009,G3,2.1,2.0,0.007,77.52,0.007,,0.92,1.19,0.77,7,0,0*76";
char testGGA_1[] = "$GPGGA,092725.00,4717.11399,N,00833.91590,E,1,08,1.01,499.6,M,48.0,M,,*5B";
char testGGA_2[] = "$GPGGA,235959.00,4717.11399,S,00833.91590,E,1,08,1.01,24999.6,M,48.0,M,,*47";
char testGGA_3[] = "$GPGGA,000001.00,4717.11399,S,00833.91590,W,1,08,1.01,44099.6,M,48.0,M,,*5A";
char testGGA_4[] = "$GPGGA,100000.00,4717.11399,N,00833.91590,W,1,08,1.01,-499.6,M,48.0,M,,*6E";
char testGGA_5[] = "$GPGGA,100200.00,0000.00009,N,00000.00005,E,1,08,1.01,-1499.6,M,48.0,M,,*49";
char testGGA_6[] = "$GPGGA,100400.00,0000.00009,S,00000.00005,E,1,08,1.01,-5499.6,M,48.0,M,,*56";
char testGGA_7[] = "$GPGGA,100600.00,0000.00009,S,00000.00005,W,1,08,1.01,-10499.6,M,48.0,M,,*72";
char testGGA_8[] = "$GPGGA,100800.00,0000.00009,N,00000.00005,W,1,08,1.01,-40499.6,M,48.0,M,,*64";
char testGGA_9[] = "$GPGGA,051800.00,8959.99991,N,17959.99995,E,1,08,1.01,-1.1,M,48.0,M,,*73";
char testGGA_10[] = "$GPGGA,052800.00,8959.99991,S,17959.99995,E,1,08,1.01,-2.2,M,48.0,M,,*6D";
char testGGA_11[] = "$GPGGA,053800.00,8959.99991,S,17959.99995,W,1,08,1.01,-3.3,M,48.0,M,,*7E";
char testGGA_12[] = "$GPGGA,054800.00,8959.99991,N,17959.99995,W,1,08,1.01,-4.4,M,48.0,M,,*64";
*/